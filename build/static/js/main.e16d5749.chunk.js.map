{"version":3,"sources":["components/Form.js","components/Recipes.js","App.js","components/Recipe.js","components/Router.js","serviceWorker.js","index.js"],"names":["Form","props","onSubmit","getRecipe","style","marginBottom","className","type","name","id","Recipes","recipes","map","recipe","key","title","src","image_url","alt","length","substring","publisher","to","pathname","recipe_id","state","App","event","a","recipeName","target","elements","value","preventDefault","fetch","api_call","json","data","setState","this","React","Component","Recipe","activeRecipe","componentDidMount","location","req_api_call","href","publisher_url","source_url","ingredients","ingredient","width","Router","path","component","strict","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wSAEaA,G,MAAO,SAACC,GAAD,OAChB,0BAAMC,SAAUD,EAAME,UAAWC,MAAO,CAAEC,aAAa,SACnD,2BAAOC,UAAU,cAAcC,KAAK,OAAOC,KAAK,aAAaC,GAAG,KAChE,4BAAQH,UAAU,gBAAlB,aCwCOI,EA1CC,SAACT,GACb,OACI,yBAAKK,UAAU,aACb,yBAAKA,UAAU,OACZL,EAAMU,QAAQC,KAAI,SAACC,GAClB,OACE,yBACEC,IAAKD,EAAOE,MACZT,UAAU,WACVF,MAAO,CAAEC,aAAc,SAEvB,yBAAKC,UAAU,gBACb,yBACEA,UAAU,kBACVU,IAAKH,EAAOI,UACZC,IAAKL,EAAOE,QAEd,yBAAKT,UAAU,gBACb,wBAAIA,UAAU,kBACXO,EAAOE,MAAMI,OAAS,GAAtB,UACMN,EAAOE,OADb,UAEMF,EAAOE,MAAMK,UAAU,EAAG,IAFhC,QAIH,uBAAGd,UAAU,qBAAb,cACa,8BAAOO,EAAOQ,aAG7B,4BAAQf,UAAU,mBACd,kBAAC,IAAD,CAAMgB,GAAI,CACNC,SAAS,WAAD,OAAaV,EAAOW,WAC5BC,MAAO,CAAChB,GAAII,EAAOW,aAFvB,yBCCTE,E,4MA1BbD,MAAQ,CACNd,QAAS,I,EAEXR,U,uCAAY,WAAOwB,GAAP,mBAAAC,EAAA,6DACJC,EAAaF,EAAMG,OAAOC,SAASF,WAAWG,MACpDL,EAAMM,iBAFI,SAGaC,MAAM,qFAAD,OAC2DL,EAD3D,YAHlB,cAGJM,EAHI,gBAMSA,EAASC,OANlB,OAMJC,EANI,OAOV,EAAKC,SAAS,CAAE3B,QAAS0B,EAAK1B,UAPpB,2C,6GAWV,OACE,yBAAKL,UAAU,OACb,4BAAQA,UAAU,cAChB,wBAAIA,UAAU,aAAd,kBAEF,kBAAC,EAAD,CAAMH,UAAWoC,KAAKpC,YACtB,kBAAC,EAAD,CAASQ,QAAS4B,KAAKd,MAAMd,e,GArBnB6B,IAAMC,WCsDTC,E,4MAxDbjB,MAAQ,CACNkB,aAAc,I,EAEhBC,kB,sBAAoB,gCAAAhB,EAAA,6DACZnB,EAAK,EAAKR,MAAM4C,SAASpB,MAAMhB,GADnB,SAESyB,MAAM,oFAAD,OACsDzB,IAHpE,cAEZqC,EAFY,gBAKCA,EAAaV,OALd,OAKZC,EALY,OAMlB,EAAKC,SAAS,CAAEK,aAAcN,EAAKxB,SANjB,2C,uDASlB,IAAMA,EAAS0B,KAAKd,MAAMkB,aAC1B,OACE,yBAAKrC,UAAU,mBACuB,IAAnCiC,KAAKd,MAAMkB,aAAaxB,QACvB,yBAAKb,UAAU,iBACb,yBACEA,UAAU,qBACVU,IAAKH,EAAOI,UACZC,IAAKL,EAAOE,QAEd,wBAAIT,UAAU,wBAAwBO,EAAOE,OAC7C,wBAAIT,UAAU,4BAAd,cACa,8BAAOO,EAAOQ,YAE3B,uBAAGf,UAAU,0BAAb,eAEE,8BACE,uBAAGyC,KAAMlC,EAAOmC,eAAgBnC,EAAOoC,cAG3C,uBAAG3C,UAAU,0BAAb,eAEE,8BACE,wBAAIA,UAAU,cACbO,EAAOqC,YAAYtC,KAAI,SAACuC,GACrB,OACA,wBAAI/C,MAAO,CAAEgD,MAAO,OAAS9C,UAAU,mBAClC6C,SAOb,4BAAQ7C,UAAU,yBAChB,kBAAC,IAAD,CAAMgB,GAAG,KAAT,kB,GAhDOkB,IAAMC,WCYZY,EATA,kBACX,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,cAAcC,UAAWb,IACrC,kBAAC,IAAD,CAAOY,KAAK,IAAIE,QAAM,EAACD,UAAW7B,OCG1B+B,QACW,cAA7BC,OAAOb,SAASc,UAEe,UAA7BD,OAAOb,SAASc,UAEhBD,OAAOb,SAASc,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e16d5749.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Form = (props) => (\n    <form onSubmit={props.getRecipe} style={{ marginBottom:\"2rem\" }}>\n        <input className=\"form__input\" type=\"text\" name=\"recipeName\" id=\"\" />\n        <button className=\"form__button\">Search</button>\n    </form>\n)","import React from \"react\";\nimport { Link } from 'react-router-dom';\n\nconst Recipes = (props) => {\n    return (\n        <div className=\"container\">\n          <div className=\"row\">\n            {props.recipes.map((recipe) => {\n              return (\n                <div\n                  key={recipe.title}\n                  className=\"col-md-4\"\n                  style={{ marginBottom: \"2rem\" }}\n                >\n                  <div className=\"recipes__box\">\n                    <img\n                      className=\"recipe__box-img\"\n                      src={recipe.image_url}\n                      alt={recipe.title}\n                    />\n                    <div className=\"recipe__text\">\n                      <h5 className=\"recipes__title\">\n                        {recipe.title.length < 20\n                          ? `${recipe.title}`\n                          : `${recipe.title.substring(0, 25)}...`}\n                      </h5>\n                      <p className=\"recipes__subtitle\">\n                        Publisher: <span>{recipe.publisher}</span>\n                      </p>\n                    </div>\n                    <button className=\"recipe__buttons\">\n                        <Link to={{ \n                            pathname: `/recipe/${recipe.recipe_id}`,\n                            state: {id: recipe.recipe_id}\n                        }}>View Recipie</Link>\n                    </button>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      );\n};\n\nexport default Recipes;\n","import React from \"react\";\nimport \"./App.css\";\nimport { Form } from \"./components/Form\";\nimport Recipes from \"./components/Recipes\";\n\nclass App extends React.Component {\n  state = {\n    recipes: [],\n  };\n  getRecipe = async (event) => {\n    const recipeName = event.target.elements.recipeName.value;\n    event.preventDefault();\n    const api_call = await fetch(\n      `https://cors-anywhere.herokuapp.com/https://recipesapi.herokuapp.com/api/search?q=${recipeName}&page=1`\n    );\n    const data = await api_call.json();\n    this.setState({ recipes: data.recipes });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Recipe-Finder</h1>\n        </header>\n        <Form getRecipe={this.getRecipe} />\n        <Recipes recipes={this.state.recipes} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nclass Recipe extends React.Component {\n  state = {\n    activeRecipe: [],\n  };\n  componentDidMount = async () => {\n    const id = this.props.location.state.id;\n    const req_api_call = await fetch(\n      `https://cors-anywhere.herokuapp.com/https://recipesapi.herokuapp.com/api/get?rId=${id}`\n    );\n    const data = await req_api_call.json();\n    this.setState({ activeRecipe: data.recipe });\n  };\n  render() {\n    const recipe = this.state.activeRecipe;\n    return (\n      <div className=\"container-fluid\">\n        {this.state.activeRecipe.length !== 0 && (\n          <div className=\"active-recipe\">\n            <img\n              className=\"active-recipe__img\"\n              src={recipe.image_url}\n              alt={recipe.title}\n            />\n            <h3 className=\"active-recipe__title\">{recipe.title}</h3>\n            <h4 className=\"active-recipe__publisher\">\n              Publisher: <span>{recipe.publisher}</span>\n            </h4>\n            <p className=\"active-recipe__website\">\n              Full Recipe:\n              <span>\n                <a href={recipe.publisher_url}>{recipe.source_url}</a>\n              </span>\n            </p>\n            <p className=\"active-recipe__website\">\n              Ingredients:\n              <span>\n                <ul className=\"list-group\">\n                {recipe.ingredients.map((ingredient) => {\n                    return (\n                    <li style={{ width: \"70%\" }} className=\"list-group-item\">\n                        {ingredient}\n                    </li>\n                    );\n                })}\n                </ul>\n              </span>\n            </p>\n            <button className=\"active-recipe__button\">\n              <Link to=\"/\">Go Home</Link>\n            </button>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Recipe;\n","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport App from '../App';\nimport Recipe from './Recipe';\n\nconst Router = () => (\n    <BrowserRouter>\n        <Switch>\n            <Route path=\"/recipe/:id\" component={Recipe} />\n            <Route path=\"/\" strict component={App} />\n        </Switch>\n    </BrowserRouter>\n);\n\nexport default Router;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Router from './components/Router';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}